/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// dt-formatter: indent = "  "
// dt-formatter: reindentMultilineIntegerCells = "dedent"

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick-tap-ms = <150>;
      flavor = "hold-preferred";
      bindings =
        <&kp>,
        <&kp>;

      global-quick-tap;
    };
    scw: shift_caps_word {
      compatible = "zmk,behavior-tap-dance";
      label = "SHIFT_CAPS_WORD";
      #binding-cells = <0>;
      bindings =
        <&sk LSHFT>,
        <&caps_word>;
    };
    tdl: tap_dance_layer {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_LAYER";
      #binding-cells = <0>;
      bindings =
        <&mo 1>,
        <&to 1>;
    };
  };

  combos {
    compatible = "zmk,combos";

    caps_word {
      bindings = <&caps_word>;
      key-positions = <17 18>;
    };

    to_base_layer {
      bindings = <&to 0>;
      key-positions = <38 39>;
    };

    clear_bluetooth_profile {
      bindings = <&bt BT_CLR>;
      key-positions = <0 38 39 11>;
    };
  };

  macros {
    zed_em_kay: zed_em_kay {
      compatible = "zmk,behavior-macro";
      label = "ZM_zed_em_kay";
      #binding-cells = <0>;
      bindings =
        <&macro_press>,
        <&kp LSHFT>,
        <&macro_tap>,
        <&kp Z &kp M &kp K>,
        <&macro_release>,
        <&kp LSHFT>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
  &kp TAB  &kp Q        &kp W       &kp E       &kp R      &kp T      &kp Y       &kp U       &kp I        &kp O     &kp P  &kp BSPC
&kp GRAVE  &kp A  &hm LCTRL S  &hm LALT D  &hm LGUI F      &kp G      &kp H  &hm LGUI J  &hm RALT K  &hm RCTRL L  &kp SEMI  &kp APOS
  &kp ESC  &kp Z        &kp X       &kp C       &kp V      &kp B      &kp N       &kp M   &kp COMMA      &kp DOT  &kp FSLH  &kp BSLH
                                    &none        &scw  &kp SPACE    &kp RET        &tdl     &kp ESC
      >;
    };

    raise {
      bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5       &kp N6     &kp N7    &kp N8             &kp N9  &kp N0  &kp DEL
&trans  &trans  &trans  &trans  &trans  &trans       &trans     &trans    &trans             &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp MINUS  &kp EQUAL  &kp LBKT  &kp RIGHT_BRACKET  &trans   &trans
                        &trans  &trans  &trans       &trans      &to 0    &trans
      >;
    };

    lower {
      bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET   &kp AMPS  &kp ASTRK  &kp LPAR  &kp RPAR     &trans
&trans    &trans  &trans    &trans    &trans     &trans    &kp MINUS  &kp EQUAL   &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
&trans    &trans  &trans    &trans    &trans     &trans    &kp UNDER   &kp PLUS   &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
                            &trans     &mo 3     &trans       &trans     &trans     &trans
      >;
    };

    both {
      bindings = <
&trans  &trans  &trans  &trans  &trans  &bt BT_SEL 0    &bt BT_SEL 3  &trans  &trans  &trans  &trans    &rgb_ug RGB_COLOR_HSB(0,60,50)
&trans  &trans  &trans  &trans  &trans  &bt BT_SEL 1    &bt BT_SEL 4  &trans  &trans  &trans  &trans  &rgb_ug RGB_COLOR_HSB(120,60,50)
&trans  &trans  &trans  &trans  &trans  &bt BT_SEL 2      &bt BT_CLR  &trans  &trans  &trans  &trans  &rgb_ug RGB_COLOR_HSB(240,60,50)
                        &trans  &trans        &trans          &trans  &trans  &trans
      >;
    };
  };
};
