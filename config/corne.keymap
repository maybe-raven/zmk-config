/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// dt-formatter: indent = "  "
// dt-formatter: reindentMultilineIntegerCells = "dedent"

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };

    tdl1: tap_dance_layer_1 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_LAYER_1";
      #binding-cells = <0>;
      bindings = <&mo 1>, <&to 1>;

      tapping-term-ms = <250>;
    };

    tdl2: tap_dance_layer_2 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_LAYER_2";
      #binding-cells = <0>;
      bindings = <&mo 2>, <&to 2>;

      tapping-term-ms = <250>;
    };

    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      bindings = <&kp>;
      #binding-cells = <1>;
      release-after-ms = <1000>;
      quick-release;
      ignore-modifiers;
    };

    slq: slq {
      compatible = "zmk,behavior-sticky-key";
      label = "SLQ";
      bindings = <&mo>;
      #binding-cells = <1>;
      release-after-ms = <2000>;
      quick-release;
      ignore-modifiers;
    };
  };

  combos { compatible = "zmk,combos"; };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
&kp TAB     &kp Q        &kp W        &kp E       &kp R            &kp T        &kp Y      &kp U       &kp I       &kp O        &kp P           &kp BSPC
&kp GRAVE   &hm GLOBE A  &hm LCTRL S  &hm LALT D  &hm LGUI F       &kp G        &kp H      &hm LGUI J  &hm RALT K  &hm RCTRL L  &hm GLOBE SEMI  &kp SQT
&caps_word  &kp Z        &kp X        &kp C       &kp V            &kp B        &kp N      &kp M       &kp COMMA   &kp DOT      &none           &kp CAPSLOCK
                                      &kp ESC     &skq LEFT_SHIFT  &kp SPACE    &kp ENTER  &slq 1      &sl 2
      >;
    };

    num+symbols {
      bindings = <
&trans  &kp BSLH  &kp N1  &kp N2  &kp N3  &kp MINUS    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LBKT       &kp RBKT      &trans  &trans
&trans  &kp FSLH  &kp N4  &kp N5  &kp N6  &kp EQUAL    &kp COMMA             &kp DOT                &kp AMPERSAND  &kp ASTERISK  &trans  &trans
&trans  &trans    &kp N7  &kp N8  &kp N9  &kp N0       &trans                &trans                 &trans         &trans        &trans  &trans
                          &trans  &trans  &trans       &trans                &to 0                  &to 0
      >;
    };

    fn+media {
      bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp LG(F3)    &kp LC(UP)  &kp LC(DOWN)  &kp K_MUTE      &kp C_VOL_DN  &kp C_VOL_UP  &kp DEL
&kp F1        &kp F2        &kp F3      &kp F4    &kp F5      &kp F6        &kp LEFT    &kp DOWN      &kp UP          &kp RIGHT     &bt BT_PRV    &bt BT_PRV
&kp F7        &kp F8        &kp F9      &kp F10   &kp F11     &kp F12       &kp HOME    &msc SCRL_UP  &msc SCRL_DOWN  &kp END       &trans        &bt BT_CLR
                                        &trans    &trans      &trans        &trans      &to 0         &to 0
      >;
    };
  };
};
